# CÓDIGO PARA IDENTIFICAÇÃO DOS CLUSTERS EM DIFERENTES RODADAS

# Carregando pacotes
if(require(dplyr) == F) install.packages('dplyr')
require(dplyr)
if(require(tidyverse) == F) install.packages('tidyverse')
require(tidyverse)
if(require(igraph) == F) install.packages('igraph')
require(igraph)
if(require(tidyr) == F) install.packages('tidyr')
require(tidyr)

# Definindo a tabela de clusters e documentos
documents_clusters <- list(
  "Pessoas com Deficiência" = list(docs = c("48/96", "49/153", "48/95", "48/99", "2856 (xxvi)"), size = "small"),
  "Desenvolvimento Sustentável e Apoio as Nações em Desenvolvimento" = list(docs = c("70/1", "69/313", "55/2", "60/1", "s-26/2"), size = "large"),
  "Situação dos Direitos Humanos na Republica Árabe Síria" = list(docs = c("66/253 a", "66/253 b", "67/183", "67/262", "70/234"), size = "small"),
  "Efeitos da Radiação Atômica" = list(docs = c("66/70", "72/76", "73/261", "71/89", "76/75"), size = "small"),
  "Assistência Econômica e Financeira a Países em Crise e com Desafios de Desenvolvimento" = list(docs = c("32/99", "34/121", "37/151", "38/205", "38/208"), size = "large"),
  "Questões Jurídico-Institucionais com Enfoque em Direitos Humanos" = list(docs = c("217 a (iii)", "44/25", "2200 a (xxi)", "55/25", "61/295"), size = "large"),
  "Questões Relacionadas à População Idosa" = list(docs = c("68/134", "75/131", "69/146", "71/164", "72/144"), size = "small"),
  "Saúde e Segurança dos Assistentes Humanitários e Voluntários das Nações Unidas" = list(docs = c("46/182", "54/192", "55/175", "61/220", "64/75"), size = "small"),
  "Usos Pacíficos do Espaço Sideral" = list(docs = c("61/111", "62/217", "71/90", "50/27", "65/97"), size = "large"),
  "Desenvolvimento Social da Juventude" = list(docs = c("50/81", "62/126", "45/103", "56/113", "59/147"), size = "small")
)

# Definindo a semente para reprodutibilidade
set.seed(123)

# Carregando os dados e criando o grafo fora da função (para evitar carregar a cada iteração)
load("/Users/rennanpl/r_intro/ga2022.RData")
g_ga_el <- graph_from_data_frame(ga_el, directed = F)

# Função para rodar o algoritmo de detecção de clusters e verificar a presença dos documentos centrais
cluster_casino_royale <- function(seed, graph_object, documents_clusters) { 
  set.seed(seed)
  
  # Usando o grafo passado como argumento
  u_health_text <- as.undirected(graph_object)
  comunidade_louvain <- cluster_louvain(u_health_text)
  V(u_health_text)$membresia_louvain <- comunidade_louvain$membership
  
  # Convertendo o grafo em um dataframe
  vertices_df <- data.frame(
    identificador = V(u_health_text)$name,
    membresia_louvain = V(u_health_text)$membresia_louvain
  )
  
  # Dataframe para armazenar os resultados dos clusters válidos
  results_df <- data.frame(Cluster = character(), Test_Presence = integer(), Test_Size = integer(), Valid = integer(), Seed = integer(), stringsAsFactors = FALSE)
  
  for (cluster_name in names(documents_clusters)) {
    cluster_info <- documents_clusters[[cluster_name]]
    documents <- cluster_info$docs
    cluster_size <- cluster_info$size
    
    # Verificando a presença dos documentos centrais no cluster
    cluster_occurrences <- vertices_df %>%
      filter(identificador %in% documents) %>%
      count(membresia_louvain)
    
    # Identificando o cluster correspondente
    identified_clusters <- cluster_occurrences %>%
      filter(n >= 4) %>%
      pull(membresia_louvain)
    
    # Verificando o tamanho do cluster identificado
    sizes_of_clusters <- vertices_df %>%
      filter(membresia_louvain %in% identified_clusters) %>%
      count(membresia_louvain)
    
    valid_cluster <- sizes_of_clusters %>%
      mutate(valid = case_when(
        cluster_size == "small" & n <= 1000 ~ TRUE,
        cluster_size == "large" ~ TRUE,
        TRUE ~ FALSE
      )) %>%
      filter(valid == TRUE) %>%
      pull(membresia_louvain)
    
    # Verificação de testes
    test_presence <- ifelse(length(identified_clusters) > 0, 1, 0)
    test_size <- ifelse(length(valid_cluster) > 0, 1, 0)
    valid <- ifelse(test_presence == 1 & test_size == 1, 1, 0)
    
    # Adicionando resultados ao dataframe
    results_df <- rbind(results_df, data.frame(Cluster = cluster_name, Test_Presence = test_presence, Test_Size = test_size, Valid = valid, Seed = seed))
  }
  
  return(results_df)
}

# Função para rodar o algoritmo múltiplas vezes e acumular os resultados
run_multiple_times <- function(runs, graph_object, documents_clusters) {
  all_results <- data.frame()
  seeds <- sample(1:10000, runs)
  
  for (i in 1:runs) {
    seed <- seeds[i]
    results_df <- cluster_casino_royale(seed, graph_object, documents_clusters)
    all_results <- rbind(all_results, results_df)
  }
  
  return(all_results)
}

# Definindo o número de execuções
runs <- 100

# Rodando o algoritmo múltiplas vezes e acumulando os resultados
all_results <- run_multiple_times(runs, g_ga_el, documents_clusters)

# Visualizando os resultados finais
View(all_results)

# Função para calcular o desempenho dos clusters
calculate_performance <- function(results) {
  performance <- results %>%
    group_by(Cluster) %>%
    summarise(
      Frequency = sum(Valid),
      Rank_Sum = sum(ifelse(Valid == 1, 1 / row_number(), 0)),
      Score = sum(ifelse(Valid == 1, 1 / row_number(), 0)) * sum(Valid)
    )
  return(performance)
}

# Calculando o desempenho dos clusters
performance <- calculate_performance(all_results)

# Visualizando o desempenho dos clusters
View(performance)

# Função para gerar tabelas de ranking por categoria
generate_rankings <- function(performance) {
  ranking_frequency <- performance %>%
    arrange(desc(Frequency)) %>%
    mutate(Rank_Frequency = row_number())
  
  ranking_rank_sum <- performance %>%
    arrange(Rank_Sum) %>%
    mutate(Rank_Rank_Sum = row_number())
  
  ranking_score <- performance %>%
    arrange(desc(Score)) %>%
    mutate(Rank_Score = row_number())
  
  return(list(
    Ranking_Frequency = ranking_frequency,
    Ranking_Rank_Sum = ranking_rank_sum,
    Ranking_Score = ranking_score
  ))
}

# Gerando os rankings por categoria
rankings <- generate_rankings(performance)

# Visualizando os rankings
View(rankings$Ranking_Frequency)
View(rankings$Ranking_Rank_Sum)
View(rankings$Ranking_Score)
