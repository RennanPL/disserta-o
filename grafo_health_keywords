#CRIANDO UM GRAFO COM AS KEYWORDS
install.packages("dplyr")
install.packages("tidyverse")
install.packages("igraph")
install.packages("tidyr")
library('igraph')
library('tidyverse')
getwd() 
library(dplyr)
library(tidyr)

# Importando a node list e a edge list
load("/Users/rennanpl/r_intro/ga2022.RData")

# Construindo um grafo a partir do dataframe da edge
g_ga_el <- graph_from_data_frame(ga_el, directed = F)

plot(g_ga_el)

# Trazendo a coluna res_id2 para frente
# Cria um vetor com os novos índices das colunas
new_order <- c(4, 1:3, 5:ncol(ga_res_text_dv))

# Reordena as colunas do dataframe conforme o novo vetor de índices
ga_res_text_dv <- ga_res_text_dv[, new_order]

# Exibe o dataframe reordenado
View(ga_res_text_dv)

# Lista de palavras-chave relacionadas à saúde
palavras_chave <- c("healthcare", "disease", "medicine", "epidemic", "pandemic", "world health organization", "immunodeficiency", "pharmaceutical", "medical", "health insurance")


# Criar a variável dummy "has_keyword"
ga_res_text_dv <- ga_res_text_dv %>%
  mutate(has_keyword = ifelse(
    grepl(paste(palavras_chave, collapse = "|"), content_ed, ignore.case = TRUE),
    1, 0
  ))

# Contando quantas células contêm pelo menos uma keyword
total_has_keyword <- sum(ga_res_text_dv$has_keyword)

# Criando um grafo com el + nl

g_health_text <- graph_from_data_frame(ga_el, directed = T, vertices = ga_res_text_dv) #### MELHOR MANTER DIRECTED = T, DO CONTRÁRIO, COMO VOCÊ VAI SABER QUEM CITOU E QUEM FOI CITADO? (RAFAEL)

plot(g_health_text)

# Checagem do número de arestas e de nós

n_nodes <- vcount(g_health_text)
n_edges <- ecount(g_health_text)

#DETECÇÃO DE COMUNIDADES

# Criando uma cópia para aplicação do cluster Louvain
u_health_text <-as.undirected(g_health_text) 

# Aplicando louvain a g_s13
cluster_louvain(u_health_text)

# Salvando o objeto communities
comunidade_louvain <- cluster_louvain(u_health_text)
comunidade_louvain
# plotando
plot(comunidade_louvain, u_health_text)

# Membresia
comunidade_louvain$membership
V(u_health_text)$name

# Salvando a membresia como atributo dos vertices e plotando
V(u_health_text)$membresia_louvain <- comunidade_louvain$membership

View(g_health_text)

#TABULAÇÃO

# Convertendo o grafo em um dataframe para análise
vertices_df <- data.frame(
  identificador = V(u_health_text)$name,
  has_keyword = V(g_health_text)$has_keyword,
  membresia_louvain = V(u_health_text)$membresia_louvain
)

# Criando uma tabela de contingência para explorar a relação entre has_keyword e a membresia
tabela_contingencia <- vertices_df %>%
  group_by(membresia_louvain, has_keyword) %>%
  summarise(count = n(), .groups = 'drop')
View(tabela_contingencia)

# Agrupando por membresia de cluster e sumarizando o total de vértices com has_keyword=1 por cluster
cluster_keyword_summary <- vertices_df %>%
  group_by(membresia_louvain) %>%
  summarise(total_has_keyword = sum(has_keyword)) %>%
  ungroup()

# Adicionando essa informação de volta ao dataframe original dos vértices
# Isso criará uma coluna que indica, para cada vértice, o total de vértices no mesmo cluster que têm as keywords=1
vertices_df <- vertices_df %>%
  left_join(cluster_keyword_summary, by = "membresia_louvain")

View(vertices_df)

# Filtrando apenas os vértices com has_keyword=1 e contando por cluster
top_clusters_keyword_count <- vertices_df %>%
  filter(has_keyword == 1) %>%
  group_by(membresia_louvain) %>%
  summarise(count_has_keyword_1 = n()) %>%
  ungroup() %>%
  arrange(desc(count_has_keyword_1)) %>%
  slice_head(n = 20) # Seleciona os 20 primeiros

top_clusters_keyword_count

